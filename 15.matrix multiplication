#include <stdio.h>
#include <stdlib.h>

// Function to add two matrices
void matrixAdd(int n, int A[][n], int B[][n], int C[][n]) {
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            C[i][j] = A[i][j] + B[i][j];
        }
    }
}

// Function to subtract two matrices
void matrixSubtract(int n, int A[][n], int B[][n], int C[][n]) {
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            C[i][j] = A[i][j] - B[i][j];
        }
    }
}

// Function to perform matrix multiplication using Strassen's algorithm
void strassenMultiply(int n, int A[][n], int B[][n], int C[][n]) {
    // Base case: if the matrix size is 1x1
    if (n == 1) {
        C[0][0] = A[0][0] * B[0][0];
        return;
    }

    // Calculate the submatrix sizes
    int newSize = n / 2;

    // Create submatrices for dividing A, B, and C matrices
    int A11[newSize][newSize], A12[newSize][newSize], A21[newSize][newSize], A22[newSize][newSize];
    int B11[newSize][newSize], B12[newSize][newSize], B21[newSize][newSize], B22[newSize][newSize];
    int C11[newSize][newSize], C12[newSize][newSize], C21[newSize][newSize], C22[newSize][newSize];
    int P1[newSize][newSize], P2[newSize][newSize], P3[newSize][newSize], P4[newSize][newSize], P5[newSize][newSize];
    int P6[newSize][newSize], P7[newSize][newSize];

    // Divide matrices A and B into submatrices
    for (int i = 0; i < newSize; i++) {
        for (int j = 0; j < newSize; j++) {
            A11[i][j] = A[i][j];
            A12[i][j] = A[i][j + newSize];
            A21[i][j] = A[i + newSize][j];
            A22[i][j] = A[i + newSize][j + newSize];

            B11[i][j] = B[i][j];
            B12[i][j] = B[i][j + newSize];
            B21[i][j] = B[i + newSize][j];
            B22[i][j] = B[i + newSize][j + newSize];
        }
    }

    // Compute the seven products P1 to P7
    matrixAdd(newSize, A11, A22, C11);
    matrixAdd(newSize, B11, B22, C12);
    strassenMultiply(newSize, C11, C12, P1);

    matrixAdd(newSize, A21, A22, C11);
    strassenMultiply(newSize, C11, B11, P2);

    matrixSubtract(newSize, B12, B22, C12);
    strassenMultiply(newSize, A11, C12, P3);

    matrixSubtract(newSize, B21, B11, C12);
    strassenMultiply(newSize, A22, C12, P4);

    matrixAdd(newSize, A11, A12, C11);
    strassenMultiply(newSize, C11, B22, P5);

    matrixSubtract(newSize, A21, A11, C11);
    matrixAdd(newSize, B11, B12, C12);
    strassenMultiply(newSize, C11, C12, P6);

    matrixSubtract(newSize, A12, A22, C11);
    matrixAdd(newSize, B21, B22, C12);
    strassenMultiply(newSize, C11, C12, P7);

    // Compute the values of the resulting matrix C
    matrixAdd(newSize, P1, P4, C11);
    matrixSubtract(newSize, C11, P5, C11);
    matrixAdd(newSize, C11, P7, C11);

    matrixAdd(newSize, P3, P5, C12);

    matrixAdd(newSize, P2, P4, C21);

    matrixSubtract(newSize, P1, P2, C22);
    matrixAdd(newSize, C22, P3, C22);
    matrixAdd(newSize, C22, P6, C22);

    // Combine the submatrices to form the resulting matrix C
    for (int i = 0; i < newSize; i++) {
        for (int j = 0; j < newSize; j++) {
            C[i][j] = C11[i][j];
            C[i][j + newSize] = C12[i][j];
            C[i + newSize][j] = C21[i][j];
            C[i + newSize][j + newSize] = C22[i][j];
        }
    }
}

// Function to print a matrix
void printMatrix(int n, int mat[][n]) {
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            printf("%d\t", mat[i][j]);
        }
        printf("\n");
    }
}

int main() {
    int n;

    printf("Enter the size of matrices (power of 2): ");
    scanf("%d", &n);

    // Check if the size is a power of 2
    int sizeCheck = n;
    int isPowerOfTwo = 0;
    while (sizeCheck > 1) {
        if (sizeCheck % 2 != 0) {
            isPowerOfTwo = 1;
            break;
        }
        sizeCheck /= 2;
    }

    if (isPowerOfTwo) {
        printf("The size of matrices should be a power of 2.\n");
        return 0;
    }

    int A[n][n], B[n][n], C[n][n];

    printf("Enter the elements of matrix A:\n");
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            scanf("%d", &A[i][j]);
        }
    }

    printf("Enter the elements of matrix B:\n");
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            scanf("%d", &B[i][j]);
        }
    }

    strassenMultiply(n, A, B, C);

    printf("Resultant matrix C:\n");
    printMatrix(n, C);

    return 0;
}
