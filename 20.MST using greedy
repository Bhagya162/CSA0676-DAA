#include <stdio.h>
#include <stdbool.h>
#include <limits.h>

#define MAX_VERTICES 100

// Function to find the vertex with the minimum key value
int findMinKey(int key[], bool mstSet[], int numVertices) {
    int minKey = INT_MAX;
    int minIndex;

    for (int v = 0; v < numVertices; v++) {
        if (mstSet[v] == false && key[v] < minKey) {
            minKey = key[v];
            minIndex = v;
        }
    }

    return minIndex;
}

// Function to print the MST
void printMST(int parent[], int graph[MAX_VERTICES][MAX_VERTICES], int numVertices) {
    printf("Edge \tWeight\n");
    for (int v = 1; v < numVertices; v++) {
        printf("%d - %d \t%d\n", parent[v], v, graph[v][parent[v]]);
    }
}

// Function to perform MST using Prim's algorithm
void primMST(int graph[MAX_VERTICES][MAX_VERTICES], int numVertices) {
    int parent[MAX_VERTICES]; // Array to store the constructed MST
    int key[MAX_VERTICES]; // Key values used to pick the minimum weight edge
    bool mstSet[MAX_VERTICES]; // To track the included vertices in MST

    // Initialize all key values as infinite and mstSet[] as false
    for (int v = 0; v < numVertices; v++) {
        key[v] = INT_MAX;
        mstSet[v] = false;
    }

    // Start with the first vertex
    key[0] = 0; // Make the key 0 so that this vertex is picked as the first vertex
    parent[0] = -1; // First node is always the root of MST

    // Construct the MST with (numVertices - 1) vertices
    for (int count = 0; count < numVertices - 1; count++) {
        int u = findMinKey(key, mstSet, numVertices);

        mstSet[u] = true; // Add the picked vertex to the MST

        // Update key values and parent index of the adjacent vertices of the picked vertex
        for (int v = 0; v < numVertices; v++) {
            if (graph[u][v] && mstSet[v] == false && graph[u][v] < key[v]) {
                parent[v] = u;
                key[v] = graph[u][v];
            }
        }
    }

    // Print the MST
    printMST(parent, graph, numVertices);
}

int main() {
    int numVertices;
    int graph[MAX_VERTICES][MAX_VERTICES];

    printf("Enter the number of vertices: ");
    scanf("%d", &numVertices);

    printf("Enter the adjacency matrix:\n");
    for (int i = 0; i < numVertices; i++) {
        for (int j = 0; j < numVertices; j++) {
            scanf("%d", &graph[i][j]);
        }
    }

    // Perform MST using Prim's algorithm
    primMST(graph, numVertices);

    return 0;
}
